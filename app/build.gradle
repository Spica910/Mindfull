plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace "com.example.meditationapp" // Corrected namespace
    compileSdk 34

    // Properties loading is now moved inside defaultConfig conditionally

    buildFeatures { // Ensuring buildFeatures is before defaultConfig, or as per standard practice
        buildConfig true
    }

    defaultConfig {
        applicationId "com.example.meditationapp" // Corrected applicationId
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Read API key:
        // 1. Try to get it from the environment variable (set in GitHub Actions from a secret)
        // 2. If not found, try to get it from local.properties (for local development)
        // 3. If still not found, use a placeholder to avoid build failure but indicate missing key.
        def apiKey = System.getenv("GEMINI_API_KEY_FOR_BUILD")
        if (apiKey == null || apiKey.isEmpty()) {
            Properties properties = new Properties()
            if (rootProject.file("local.properties").exists()) {
                properties.load(rootProject.file("local.properties").newDataInputStream())
                apiKey = properties.getProperty("GEMINI_API_KEY", "MISSING_API_KEY_IN_LOCAL_PROPERTIES")
            } else {
                // This case should ideally not happen if local.properties is correctly managed for local dev
                apiKey = "MISSING_LOCAL_PROPERTIES_FILE"
                println "Warning: local.properties file not found. GEMINI_API_KEY will be set to placeholder."
            }
        }

        // Ensure a non-null, non-empty string is passed to buildConfigField,
        // otherwise the build might fail if apiKey is truly null/empty at this point.
        if (apiKey == null || apiKey.isEmpty()) {
            apiKey = "FINAL_FALLBACK_MISSING_API_KEY" // Should not happen with above logic
        }

        buildConfigField "String", "GEMINI_API_KEY", "\"${apiKey}\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.10.0' // Material Design
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    // Gemini API (placeholder - specific library may vary)

    // CameraX libraries
    def camerax_version = "1.3.0" // Use the latest stable version
    implementation "androidx.camera:camera-core:$camerax_version"
    implementation "androidx.camera:camera-camera2:$camerax_version"
    implementation "androidx.camera:camera-lifecycle:$camerax_version"
    implementation "androidx.camera:camera-view:$camerax_version"
    implementation "androidx.camera:camera-extensions:$camerax_version"
}
